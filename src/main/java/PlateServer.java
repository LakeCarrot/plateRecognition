/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package platerecognition;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;

import java.io.IOException;
import java.util.logging.Logger;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;

import platerecognition.PlateRecognitionGrpc;
import platerecognition.Platerecognition.PlateRecognitionRequest;
import platerecognition.Platerecognition.PlateRecognitionReply;
import platerecognizer.PlateRecognizer;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import edgeOffloading.OffloadingGrpc;
import edgeOffloading.OffloadingOuterClass.OffloadingRequest;
import edgeOffloading.OffloadingOuterClass.OffloadingReply;

public class PlateServer {
  private static final Logger logger = Logger.getLogger(PlateServer.class.getName());
	private static double effectiveRate = 0;
	private static double maxRate = 0;
	private static double minRate = 0;
	private static final double alpa = 0.5;

  private Server server;

  private void start() throws IOException {
    /* The port on which the server should run */
    int port = 50052;
    server = ServerBuilder.forPort(port)
        .addService(new PlateRecognitionImpl())
        .build()
        .start();
    logger.info("Plate Recognition Server started, listening on " + port);
    Runtime.getRuntime().addShutdownHook(new Thread() {
      @Override
      public void run() {
        // Use stderr here since the logger may have been reset by its JVM shutdown hook.
        System.err.println("*** shutting down gRPC server since JVM is shutting down");
        PlateServer.this.stop();
        System.err.println("*** server shut down");
      }
    });
  }

  private void stop() {
    if (server != null) {
      server.shutdown();
    }
  }

  /**
   * Await termination on the main thread since the grpc library uses daemon threads.
   */
  private void blockUntilShutdown() throws InterruptedException {
    if (server != null) {
      server.awaitTermination();
    }
  }

  /**
   * Main launches the server from the command line.
   */
  public static void main(String[] args) throws IOException, InterruptedException {
    final PlateServer server = new PlateServer();
    server.start();
    server.blockUntilShutdown();
  }

	static class PlateRecognitionImpl extends PlateRecognitionGrpc.PlateRecognitionImplBase {

		@Override 
	  public void offloading(PlateRecognitionRequest req, StreamObserver<PlateRecognitionReply> responseObserver) {
			BufferedOutputStream mBufferedOutputStream = null;
			String filename = "";
			byte[] data = req.getData().toByteArray();
			long dataSize = data.length;
			String name = req.getName();
			System.out.println("receive a message!");
			try {
				filename = "receive_1.jpg";
				mBufferedOutputStream = new BufferedOutputStream(new FileOutputStream(filename));
				mBufferedOutputStream.write(data);
				mBufferedOutputStream.flush();
			} catch (Exception e) {
				e.printStackTrace();
			}
			try {
				mBufferedOutputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				mBufferedOutputStream = null;
			}
			System.out.println("Plate? Plate!");
			Runtime rt = Runtime.getRuntime();
			try {
				String command = "/plateRecognition/plateProcess/build/install/plateRecognition/bin/plateRecognition " + name;
				System.out.println("start to execute command!");
				Process pr = rt.exec(command);
			} catch (Exception e) {
				Thread.currentThread().interrupt();
			}
			PlateRecognitionReply reply = PlateRecognitionReply.newBuilder()
				.setMessage("You shall not pass!")
				.build();
			// After finishing processing the request, update the speed information and decide whether to inform the change of speed to nbrs
			/*
			if(effectiveRate == 0) {
				effectiveRate = currentRate;
			} else {
		  	effectiveRate = alpa * effectiveRate + (1 - alpa) * currentRate;
			}
			if((effectiveRate - minRate)/minRate > 0.1 || (effectiveRate - maxRate)/maxRate > 0.1) {
				updateInfo(effectiveRate);
			}
			minRate = Math.min(effectiveRate, minRate);
			maxRate = Math.max(effectiveRate, maxRate);
			*/
			String hostIP = System.getenv("HOSTIP");
			System.out.println(hostIP);
			responseObserver.onNext(reply);
			responseObserver.onCompleted();
		}
	}
}
